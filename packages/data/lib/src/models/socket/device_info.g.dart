// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'device_info.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

DeviceInfo _$DeviceInfoFromJson(Map<String, dynamic> json) => DeviceInfo(
      ain1: (json['ain.1'] as num?)?.toDouble(),
      ain2: (json['ain.2'] as num?)?.toDouble(),
      batteryCurrent: (json['battery.current'] as num?)?.toDouble(),
      batteryLevel: (json['battery.level'] as num?)?.toDouble(),
      batteryTemperature: (json['battery.temperature'] as num?)?.toDouble(),
      batteryVoltage: (json['battery.voltage'] as num?)?.toDouble(),
      buttonPressedStatus: json['button.pressed.status'] as bool?,
      cableConnectedStatus: json['cable.connected.status'] as bool?,
      canAbsFailureIndicatorStatus:
          json['can.abs.failure.indicator.status'] as bool?,
      canAirConditionStatus: json['can.air.condition.status'] as bool?,
      canAirbagIndicatorStatus: json['can.airbag.indicator.status'] as bool?,
      canAutomaticRetarderStatus:
          json['can.automatic.retarder.status'] as bool?,
      canBatteryIndicatorStatus: json['can.battery.indicator.status'] as bool?,
      canBatteryVoltage: (json['can.battery.voltage'] as num?)?.toDouble(),
      canCarClosedRemoteStatus: json['can.car.closed.remote.status'] as bool?,
      canCarClosedStatus: json['can.car.closed.status'] as bool?,
      canCheckEngineIndicatorStatus:
          json['can.check.engine.indicator.status'] as bool?,
      canConnectionState1: (json['can.connection.state.1'] as num?)?.toDouble(),
      canConnectionState2: (json['can.connection.state.2'] as num?)?.toDouble(),
      canConnectionState3: (json['can.connection.state.3'] as num?)?.toDouble(),
      canCoolantLevelLowIndicatorStatus:
          json['can.coolant.level.low.indicator.status'] as bool?,
      canCruiseStatus: json['can.cruise.status'] as bool?,
      canDriverSeatbeltIndicatorStatus:
          json['can.driver.seatbelt.indicator.status'] as bool?,
      canDynamicIgnitionStatus: json['can.dynamic.ignition.status'] as bool?,
      canElectronicPowerControlStatus:
          json['can.electronic.power.control.status'] as bool?,
      canEngineIgnitionStatus: json['can.engine.ignition.status'] as bool?,
      canEngineRpm: (json['can.engine.rpm'] as num?)?.toDouble(),
      canEngineTemperature:
          (json['can.engine.temperature'] as num?)?.toDouble(),
      canEngineWorkingStatus: json['can.engine.working.status'] as bool?,
      canEpsIndicatorStatus: json['can.eps.indicator.status'] as bool?,
      canEspIndicatorStatus: json['can.esp.indicator.status'] as bool?,
      canEspStatus: json['can.esp.status'] as bool?,
      canFactoryArmedStatus: json['can.factory.armed.status'] as bool?,
      canFrontFogLightsStatus: json['can.front.fog.lights.status'] as bool?,
      canFrontLeftDoorStatus: json['can.front.left.door.status'] as bool?,
      canFrontRightDoorStatus: json['can.front.right.door.status'] as bool?,
      canFuelConsumed: (json['can.fuel.consumed'] as num?)?.toDouble(),
      canFuelLevel: (json['can.fuel.level'] as num?)?.toDouble(),
      canFuelLevelLowIndicatorStatus:
          json['can.fuel.level.low.indicator.status'] as bool?,
      canFuelVolume: (json['can.fuel.volume'] as num?)?.toDouble(),
      canGlowPlugIndicatorStatus:
          json['can.glow.plug.indicator.status'] as bool?,
      canHandbrakeIndicatorStatus:
          json['can.handbrake.indicator.status'] as bool?,
      canHandbrakeStatus: json['can.handbrake.status'] as bool?,
      canHighBeamStatus: json['can.high.beam.status'] as bool?,
      canHoodStatus: json['can.hood.status'] as bool?,
      canIgnitionKeyStatus: json['can.ignition.key.status'] as bool?,
      canLightsFailureIndicatorStatus:
          json['can.lights.failure.indicator.status'] as bool?,
      canLightsHazardLightsStatus:
          json['can.lights.hazard.lights.status'] as bool?,
      canLowBeamStatus: json['can.low.beam.status'] as bool?,
      canMaDoubleenanceRequiredStatus:
          json['can.maDoubleenance.required.status'] as bool?,
      canManualRetarderStatus: json['can.manual.retarder.status'] as bool?,
      canModuleSleepMode: json['can.module.sleep.mode'] as bool?,
      canOilPressureIndicatorStatus:
          json['can.oil.pressure.indicator.status'] as bool?,
      canParkingLightsStatus: json['can.parking.lights.status'] as bool?,
      canParkingStatus: json['can.parking.status'] as bool?,
      canPassengerSeatbeltIndicatorStatus:
          json['can.passenger.seatbelt.indicator.status'] as bool?,
      canPedalBrakeStatus: json['can.pedal.brake.status'] as bool?,
      canPrivateStatus: json['can.private.status'] as bool?,
      canReadyToDriveIndicatorStatus:
          json['can.ready.to.drive.indicator.status'] as bool?,
      canRearFogLightsStatus: json['can.rear.fog.lights.status'] as bool?,
      canRearLeftDoorStatus: json['can.rear.left.door.status'] as bool?,
      canRearRightDoorStatus: json['can.rear.right.door.status'] as bool?,
      canReverseGearStatus: json['can.reverse.gear.status'] as bool?,
      canSootFilterIndicatorStatus:
          json['can.soot.filter.indicator.status'] as bool?,
      canStopIndicatorStatus: json['can.stop.indicator.status'] as bool?,
      canThrottlePedalLevel:
          (json['can.throttle.pedal.level'] as num?)?.toDouble(),
      canTirePressureLowStatus: json['can.tire.pressure.low.status'] as bool?,
      canTrackerCountedFuelConsumed:
          (json['can.tracker.counted.fuel.consumed'] as num?)?.toDouble(),
      canTripFuelConsumed: (json['can.trip.fuel.consumed'] as num?)?.toDouble(),
      canTrunkStatus: json['can.trunk.status'] as bool?,
      canVehicleBatteryChargingStatus:
          json['can.vehicle.battery.charging.status'] as bool?,
      canVehicleBatteryLevel:
          (json['can.vehicle.battery.level'] as num?)?.toDouble(),
      canVehicleMileage: (json['can.vehicle.mileage'] as num?)?.toDouble(),
      canVehicleSpeed: (json['can.vehicle.speed'] as num?)?.toDouble(),
      canWarningIndicatorStatus: json['can.warning.indicator.status'] as bool?,
      canWearBrakePadsIndicatorStatus:
          json['can.wear.brake.pads.indicator.status'] as bool?,
      canWebastoStatus: json['can.webasto.status'] as bool?,
      carRemoteControlState:
          (json['car.remote.control.state'] as num?)?.toDouble(),
      channelId: (json['channel.id'] as num?)?.toDouble(),
      codecId: (json['codec.id'] as num?)?.toDouble(),
      deviceId: (json['device.id'] as num?)?.toDouble(),
      deviceName: json['device.name'] as String?,
      deviceTypeId: (json['device.type.id'] as num?)?.toDouble(),
      din: (json['din'] as num?)?.toDouble(),
      din1: json['din.1'] as bool?,
      din2: json['din.2'] as bool?,
      din3: json['din.3'] as bool?,
      doorOpenStatus: json['door.open.status'] as bool?,
      engineIgnitionStatus: json['engine.ignition.status'] as bool?,
      eventPriorityEnum: (json['event.priority.enum'] as num?)?.toDouble(),
      externalPowersourceVoltage:
          (json['external.powersource.voltage'] as num?)?.toDouble(),
      factoryAlarmActuatedStatus:
          json['factory.alarm.actuated.status'] as bool?,
      factoryAlarmEmulatedStatus:
          json['factory.alarm.emulated.status'] as bool?,
      gnssStateEnum: (json['gnss.state.enum'] as num?)?.toDouble(),
      gnssStatus: json['gnss.status'] as bool?,
      gpsFuelRate: (json['gps.fuel.rate'] as num?)?.toDouble(),
      gsmMcc: (json['gsm.mcc'] as num?)?.toDouble(),
      gsmMnc: (json['gsm.mnc'] as num?)?.toDouble(),
      gsmOperatorCode: json['gsm.operator.code'] as String?,
      gsmSignalLevel: (json['gsm.signal.level'] as num?)?.toDouble(),
      gsmSimIccid: json['gsm.sim.iccid'] as String?,
      ident: json['ident'] as String?,
      immobilizerKeysStatus: json['immobilizer.keys.status'] as bool?,
      immobilizerServiceStatus: json['immobilizer.service.status'] as bool?,
      movementStatus: json['movement.status'] as bool?,
      peer: json['peer'] as String?,
      positionAltitude: (json['position.altitude'] as num?)?.toDouble(),
      positionDirection: (json['position.direction'] as num?)?.toDouble(),
      positionHdop: (json['position.hdop'] as num?)?.toDouble(),
      positionLatitude: (json['position.latitude'] as num?)?.toDouble(),
      positionLongitude: (json['position.longitude'] as num?)?.toDouble(),
      positionPdop: (json['position.pdop'] as num?)?.toDouble(),
      positionSatellites: (json['position.satellites'] as num?)?.toDouble(),
      positionSpeed: (json['position.speed'] as num?)?.toDouble(),
      positionValid: json['position.valid'] as bool?,
      protocolId: (json['protocol.id'] as num?)?.toDouble(),
      segmentCanFuelConsumed:
          (json['segment.can.fuel.consumed'] as num?)?.toDouble(),
      segmentCanVehicleMileage:
          (json['segment.can.vehicle.mileage'] as num?)?.toDouble(),
      segmentVehicleMileage:
          (json['segment.vehicle.mileage'] as num?)?.toDouble(),
      serverTimestamp: (json['server.timestamp'] as num?)?.toDouble(),
      sleepModeEnum: (json['sleep.mode.enum'] as num?)?.toDouble(),
      timestamp: (json['timestamp'] as num?)?.toDouble(),
      totalTripDuration: (json['total.trip.duration'] as num?)?.toDouble(),
      tripDuration: (json['trip.duration'] as num?)?.toDouble(),
      tripFuelConsumed: (json['trip.fuel.consumed'] as num?)?.toDouble(),
      tripHarshAccelerationNumber:
          (json['trip.harsh.acceleration.number'] as num?)?.toDouble(),
      tripHarshBrakingNumber:
          (json['trip.harsh.braking.number'] as num?)?.toDouble(),
      tripIdleFuelConsumed:
          (json['trip.idle.fuel.consumed'] as num?)?.toDouble(),
      tripMaxRpm: (json['trip.max.rpm'] as num?)?.toDouble(),
      tripMaxSpeed: (json['trip.max.speed'] as num?)?.toDouble(),
      tripMileage: (json['trip.mileage'] as num?)?.toDouble(),
      tripStartTimestamp: (json['trip.start.timestamp'] as num?)?.toDouble(),
      tripStatus: json['trip.status'] as bool?,
      vehicleMileage: (json['vehicle.mileage'] as num?)?.toDouble(),
      xAcceleration: (json['x.acceleration'] as num?)?.toDouble(),
      yAcceleration: (json['y.acceleration'] as num?)?.toDouble(),
      zAcceleration: (json['z.acceleration'] as num?)?.toDouble(),
    );

Map<String, dynamic> _$DeviceInfoToJson(DeviceInfo instance) =>
    <String, dynamic>{
      'ain.1': instance.ain1,
      'ain.2': instance.ain2,
      'battery.current': instance.batteryCurrent,
      'battery.level': instance.batteryLevel,
      'battery.temperature': instance.batteryTemperature,
      'battery.voltage': instance.batteryVoltage,
      'button.pressed.status': instance.buttonPressedStatus,
      'cable.connected.status': instance.cableConnectedStatus,
      'can.abs.failure.indicator.status': instance.canAbsFailureIndicatorStatus,
      'can.air.condition.status': instance.canAirConditionStatus,
      'can.airbag.indicator.status': instance.canAirbagIndicatorStatus,
      'can.automatic.retarder.status': instance.canAutomaticRetarderStatus,
      'can.battery.indicator.status': instance.canBatteryIndicatorStatus,
      'can.battery.voltage': instance.canBatteryVoltage,
      'can.car.closed.remote.status': instance.canCarClosedRemoteStatus,
      'can.car.closed.status': instance.canCarClosedStatus,
      'can.check.engine.indicator.status':
          instance.canCheckEngineIndicatorStatus,
      'can.connection.state.1': instance.canConnectionState1,
      'can.connection.state.2': instance.canConnectionState2,
      'can.connection.state.3': instance.canConnectionState3,
      'can.coolant.level.low.indicator.status':
          instance.canCoolantLevelLowIndicatorStatus,
      'can.cruise.status': instance.canCruiseStatus,
      'can.driver.seatbelt.indicator.status':
          instance.canDriverSeatbeltIndicatorStatus,
      'can.dynamic.ignition.status': instance.canDynamicIgnitionStatus,
      'can.electronic.power.control.status':
          instance.canElectronicPowerControlStatus,
      'can.engine.ignition.status': instance.canEngineIgnitionStatus,
      'can.engine.rpm': instance.canEngineRpm,
      'can.engine.temperature': instance.canEngineTemperature,
      'can.engine.working.status': instance.canEngineWorkingStatus,
      'can.eps.indicator.status': instance.canEpsIndicatorStatus,
      'can.esp.indicator.status': instance.canEspIndicatorStatus,
      'can.esp.status': instance.canEspStatus,
      'can.factory.armed.status': instance.canFactoryArmedStatus,
      'can.front.fog.lights.status': instance.canFrontFogLightsStatus,
      'can.front.left.door.status': instance.canFrontLeftDoorStatus,
      'can.front.right.door.status': instance.canFrontRightDoorStatus,
      'can.fuel.consumed': instance.canFuelConsumed,
      'can.fuel.level': instance.canFuelLevel,
      'can.fuel.level.low.indicator.status':
          instance.canFuelLevelLowIndicatorStatus,
      'can.fuel.volume': instance.canFuelVolume,
      'can.glow.plug.indicator.status': instance.canGlowPlugIndicatorStatus,
      'can.handbrake.indicator.status': instance.canHandbrakeIndicatorStatus,
      'can.handbrake.status': instance.canHandbrakeStatus,
      'can.high.beam.status': instance.canHighBeamStatus,
      'can.hood.status': instance.canHoodStatus,
      'can.ignition.key.status': instance.canIgnitionKeyStatus,
      'can.lights.failure.indicator.status':
          instance.canLightsFailureIndicatorStatus,
      'can.lights.hazard.lights.status': instance.canLightsHazardLightsStatus,
      'can.low.beam.status': instance.canLowBeamStatus,
      'can.maDoubleenance.required.status':
          instance.canMaDoubleenanceRequiredStatus,
      'can.manual.retarder.status': instance.canManualRetarderStatus,
      'can.module.sleep.mode': instance.canModuleSleepMode,
      'can.oil.pressure.indicator.status':
          instance.canOilPressureIndicatorStatus,
      'can.parking.lights.status': instance.canParkingLightsStatus,
      'can.parking.status': instance.canParkingStatus,
      'can.passenger.seatbelt.indicator.status':
          instance.canPassengerSeatbeltIndicatorStatus,
      'can.pedal.brake.status': instance.canPedalBrakeStatus,
      'can.private.status': instance.canPrivateStatus,
      'can.ready.to.drive.indicator.status':
          instance.canReadyToDriveIndicatorStatus,
      'can.rear.fog.lights.status': instance.canRearFogLightsStatus,
      'can.rear.left.door.status': instance.canRearLeftDoorStatus,
      'can.rear.right.door.status': instance.canRearRightDoorStatus,
      'can.reverse.gear.status': instance.canReverseGearStatus,
      'can.soot.filter.indicator.status': instance.canSootFilterIndicatorStatus,
      'can.stop.indicator.status': instance.canStopIndicatorStatus,
      'can.throttle.pedal.level': instance.canThrottlePedalLevel,
      'can.tire.pressure.low.status': instance.canTirePressureLowStatus,
      'can.tracker.counted.fuel.consumed':
          instance.canTrackerCountedFuelConsumed,
      'can.trip.fuel.consumed': instance.canTripFuelConsumed,
      'can.trunk.status': instance.canTrunkStatus,
      'can.vehicle.battery.charging.status':
          instance.canVehicleBatteryChargingStatus,
      'can.vehicle.battery.level': instance.canVehicleBatteryLevel,
      'can.vehicle.mileage': instance.canVehicleMileage,
      'can.vehicle.speed': instance.canVehicleSpeed,
      'can.warning.indicator.status': instance.canWarningIndicatorStatus,
      'can.wear.brake.pads.indicator.status':
          instance.canWearBrakePadsIndicatorStatus,
      'can.webasto.status': instance.canWebastoStatus,
      'car.remote.control.state': instance.carRemoteControlState,
      'channel.id': instance.channelId,
      'codec.id': instance.codecId,
      'device.id': instance.deviceId,
      'device.name': instance.deviceName,
      'device.type.id': instance.deviceTypeId,
      'din': instance.din,
      'din.1': instance.din1,
      'din.2': instance.din2,
      'din.3': instance.din3,
      'door.open.status': instance.doorOpenStatus,
      'engine.ignition.status': instance.engineIgnitionStatus,
      'event.priority.enum': instance.eventPriorityEnum,
      'external.powersource.voltage': instance.externalPowersourceVoltage,
      'factory.alarm.actuated.status': instance.factoryAlarmActuatedStatus,
      'factory.alarm.emulated.status': instance.factoryAlarmEmulatedStatus,
      'gnss.state.enum': instance.gnssStateEnum,
      'gnss.status': instance.gnssStatus,
      'gps.fuel.rate': instance.gpsFuelRate,
      'gsm.mcc': instance.gsmMcc,
      'gsm.mnc': instance.gsmMnc,
      'gsm.operator.code': instance.gsmOperatorCode,
      'gsm.signal.level': instance.gsmSignalLevel,
      'gsm.sim.iccid': instance.gsmSimIccid,
      'ident': instance.ident,
      'immobilizer.keys.status': instance.immobilizerKeysStatus,
      'immobilizer.service.status': instance.immobilizerServiceStatus,
      'movement.status': instance.movementStatus,
      'peer': instance.peer,
      'position.altitude': instance.positionAltitude,
      'position.direction': instance.positionDirection,
      'position.hdop': instance.positionHdop,
      'position.latitude': instance.positionLatitude,
      'position.longitude': instance.positionLongitude,
      'position.pdop': instance.positionPdop,
      'position.satellites': instance.positionSatellites,
      'position.speed': instance.positionSpeed,
      'position.valid': instance.positionValid,
      'protocol.id': instance.protocolId,
      'segment.can.fuel.consumed': instance.segmentCanFuelConsumed,
      'segment.can.vehicle.mileage': instance.segmentCanVehicleMileage,
      'segment.vehicle.mileage': instance.segmentVehicleMileage,
      'server.timestamp': instance.serverTimestamp,
      'sleep.mode.enum': instance.sleepModeEnum,
      'timestamp': instance.timestamp,
      'total.trip.duration': instance.totalTripDuration,
      'trip.duration': instance.tripDuration,
      'trip.fuel.consumed': instance.tripFuelConsumed,
      'trip.harsh.acceleration.number': instance.tripHarshAccelerationNumber,
      'trip.harsh.braking.number': instance.tripHarshBrakingNumber,
      'trip.idle.fuel.consumed': instance.tripIdleFuelConsumed,
      'trip.max.rpm': instance.tripMaxRpm,
      'trip.max.speed': instance.tripMaxSpeed,
      'trip.mileage': instance.tripMileage,
      'trip.start.timestamp': instance.tripStartTimestamp,
      'trip.status': instance.tripStatus,
      'vehicle.mileage': instance.vehicleMileage,
      'x.acceleration': instance.xAcceleration,
      'y.acceleration': instance.yAcceleration,
      'z.acceleration': instance.zAcceleration,
    };
